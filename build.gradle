
buildscript {
    ext.kotlin_version = "1.3.40"
    ext.jcommander_version = "1.72"
    
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'


group 'com.thelastpickle'
version '1.0-SNAPSHOT'
mainClassName = "com.thelastpickle.tlpcluster.MainKt"
sourceCompatibility = 1.8


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
//    jcenter()
    mavenCentral()
    jcenter()
}


// In this section you declare the dependencies for your production and test code
dependencies {

    compile "org.apache.logging.log4j:log4j-api-kotlin:1.0.0"
    compile "org.apache.logging.log4j:log4j-core:2.11.1"
    compile 'org.apache.logging.log4j:log4j-slf4j18-impl:2.11.2'

    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version


    compile group: 'com.beust', name: 'jcommander', version: jcommander_version
    compile 'com.google.guava:guava:27.0-jre'

    // for finding resources
    // https://mvnrepository.com/artifact/org.reflections/reflections
    compile group: 'org.reflections', name: 'reflections', version: '0.9.11'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    // https://mvnrepository.com/artifact/com.github.docker-java/docker-java
    compile group: 'com.github.docker-java', name: 'docker-java', version: '3.1.2'

    compile group: 'software.amazon.awssdk', name: 'ec2', version: '2.5.8'

    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.0'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine

    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'

    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.1'

    compile 'com.github.ajalt:mordant:1.2.1'

    testCompile "io.mockk:mockk:1.9.3"
}

task docs(type:Exec) {
    commandLine 'docker-compose', 'up', 'docs'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]


}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]
}



sourceSets {
    main.java.srcDirs += "src/main/kotlin"
    test.java.srcDirs += "src/test/kotlin"
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    description = "Runs the full end to end tests.  Will create a cluster in AWS.  Errors might require manual cluster tear down."
    group = "Verification"
}

task buildJsonnet(type: Exec) {
    workingDir 'src/dashboards'
    commandLine "docker-compose", "build"
    standardOutput = new ByteArrayOutputStream()
    group = "build"
    description = "Rebuild the jsonnet container"
    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }

}

task generateDashboards(type: Exec) {
    workingDir 'src/dashboards'
    commandLine "docker-compose", "up"

    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()

    group = "build"
    description = "Regenerate the Grafana Dashboards using Docker."
    inputs.files(project.fileTree(dir: "src/dashboards"))

    doLast {
        logger.info(standardOutput.toString())
        logger.error(errorOutput.toString())
    }
}

task previewDashboards(type:Exec) {
    commandLine "docker-compose", "-f", "docker-compose-monitoring-dev.yml", "up"
}


test {
    useJUnitPlatform()
}
