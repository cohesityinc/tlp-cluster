#!/bin/bash
# need this or the docker_c alias won't work
shopt -s expand_aliases

dir=$(dirname $0)
BASE_DIR="$(dirname "$dir")"

COMMAND=$1
shift

COMPOSE_FILE="$BASE_DIR/docker-compose.yml"
PSSH_COMMON_OPTIONS="-i -v -l ubuntu -O StrictHostKeyChecking=no -O UserKnownHostsFile=/local/known_hosts"
PSCP_COMMON_OPTIONS="-v -l ubuntu -O StrictHostKeyChecking=no -O UserKnownHostsFile=/local/known_hosts"

PSSH_PARALLELISM="10"

# directory setup
TLP_CLUSTER_USER_DATA=~/.tlp-cluster/
TLP_CLUSTER_BUILD_DIR=$TLP_CLUSTER_USER_DATA/builds
CASSANDRA_DIR=~/.tlp-cluster/cassandra
export BUILD_NAME=""

export CASSANDRA_DIR

mkdir -p $TLP_CLUSTER_USER_DATA/{builds,maven_cache}

alias docker_c="docker-compose -f '$COMPOSE_FILE'"

install_cassandra() {
    # ensure it doesn't automatically start

    echo "Installing"
    # install all deb packages
    docker_c run pssh /usr/bin/parallel-ssh $PSSH_COMMON_OPTIONS -h /local/hosts.txt 'cd provisioning; sudo sh install.sh'

}

install_stress() {
    echo "installing stress"
}

copy_extras() {
    docker_c run pssh parallel-scp -h /local/hosts.txt $PSCP_COMMON_OPTIONS /tlp/config/bash_profile /home/ubuntu/.bash_profile
    docker_c run pssh parallel-scp -h /local/stress.txt $PSCP_COMMON_OPTIONS /tlp/config/bash_profile /home/ubuntu/.bash_profile
}

# spits out error with red text.  i know it looks ridiculous.  can't do anything about it.
error() {
    echo -ne "\x1b[31m${1}\x1b[0m\n"

}
message() {
    echo -ne "\x1b[34m${1}\x1b[0m\n"

}

rebuild() {
    docker_c build
}

usage() {
    cat <<EOF
Usage:

tlp-cluster [subcommand]

Available subcommands:

    init [client] [ticket] [purpose]            Initializes the current directory as a cluster config.
    up                                          Fires up AWS instances
    install                                     Copies provisioning/ to all nodes, installs deb packages.
    start                                       Starts up cluster.
    stop                                        Stops the cluster.
    down                                        Destroys the entire cluster.

    copy-all                                    Copies all files to remote hosts.
    cassandra-ssh                               Issue raw command on cassandra clusters over ssh.
    build-cassandra NAME [tag-or-sha-or-dir]    Build a cassandra tag or sha, or a directory.  Will be stored in ~/.tlp-cluster/builds/
    ls-cassandra                                List all available cassandra builds.
    use-cassandra                               Use a Cassandra build

Debugging (less useful) commands:

    rebuild                                     Rebuilds docker images
    copy-provisioning-scripts                   Copies the provisioning scripts to nodes.  Does not execute.
    pssh-shell                                  Drops into a shell via docker-compose with all directories mounted.
    cassandra-ssh [command]                     Run ssh command on all Cassandra instances (sc)

EOF

}

copy_provisioning_scripts() {
    echo "Copying provisioning/"
    docker_c run pssh parallel-rsync -avrz  \
                        -h hosts.txt -l ubuntu \
                        -O StrictHostKeyChecking=no  \
                        -O UserKnownHostsFile=/local/known_hosts \
                        ./provisioning/ /home/ubuntu/provisioning/
}

execute_provisioning_scripts() {
    DIR=$1

}

provision() {
    echo "Running scripts"
}

cassandra_ssh() {
    docker_c run pssh /usr/bin/parallel-ssh $PSSH_COMMON_OPTIONS -p $PSSH_PARALLELISM -h /local/hosts.txt $@
}


if [[ ! -d $CASSANDRA_DIR ]]
then
    message "Important: Cloning Cassandra repo to use for builds, this might take a minute"
    (
    cd ~/.tlp-cluster
    git clone https://github.com/apache/cassandra.git
    )
fi

# make sure the ~/.tlp-cluster directory exists with some default settings

if [[ ! -f ~/.tlp-cluster/user.tfvars ]]
then
    echo "Initializing default values in ~/.tlp-cluster/user.tfvars, please set these then rerun this command"
    cp $BASE_DIR/user.tfvars.in ~/.tlp-cluster/user.tfvars

    exit 1
fi




case $COMMAND in

    "init" )
        echo "Initializing directory."

        CLIENT=$1
        TICKET=$2
        PURPOSE=$3

        if [[ $CLIENT = "" ]]
        then
            error "Error: Client is required"
            usage
            exit 1
        fi
        if [[ $TICKET = "" ]]
        then
            error "Error: Ticket is required"
            exit 1
        fi
        if [[ $PURPOSE = "" ]]
        then
            error "Error: Please specify the purpose for this cluster."
            exit 1
        fi

        mkdir -p hosts

        if [[ ! -f terraform.tfvars ]]; then
            cp "$BASE_DIR/terraform.tfvars.in" terraform.tfvars
            echo "" >> terraform.tfvars

            # make sure we have a newline before the variables are declared
            echo "ticket = \"${TICKET}\"" >> terraform.tfvars
            echo "client = \"${CLIENT}\"" >> terraform.tfvars
            echo "purpose = \"${PURPOSE}\"" >> terraform.tfvars
        else
            echo "terraform.tvvars exists, not overwriting"
        fi

        docker_c run terraform init /tlp

        # copy scripts over

        if [[ ! -d provisioning ]]; then
            cp -R $BASE_DIR/provisioning provisioning
        fi

        cat <<EOF
Your environment has been set up.  Please edit your terraform.tfvars then run 'tlp-cluster provision' to start your AWS nodes.

EOF

        ;;

    "up" | "provision" )
        # we have to list both the variable files explicitly here
        # even though we have a terraform.tvars
        # we need the local one to apply at the highest priority
        # specifying the user one makes it take priority over the local one
        # so we have to explicitly specify the local one to ensure it gets
        # priority over user
        docker_c run terraform apply -var-file=/user/user.tfvars -var-file=/local/terraform.tfvars /tlp/
        docker_c run terraform output cassandra_ips | sed 's/,//g' > hosts.txt

        # seeds use internal IPS
        docker_c run terraform output cassandra_internal_ips | sed 's/,//g' | head -n 3 > seeds.txt
        docker_c run terraform output stress_ips | sed 's/,//g' > stress.txt



        cat <<EOF
Instances have been provisioned.  Cassandra hosts are located in hosts.txt.
Seeds are using internal IPs and are located in seeds.txt.
Stress nodes (if provisioned) are in stress.txt.

You can edit the provisioning scripts before running them, they've been copied to ./provisioning.

Next you'll probably want to run tlp-cluster build to create a new build, or use if you already have a Cassandra build you'd like to deploy.
EOF
        ;;


    "install" )
        copy_provisioning_scripts
        install_cassandra
        echo "Keys, provisioning scripts, and packages have been pushed to the nodes and installed.  Use tlp-cluster start to fire up the cluster."
        ;;

    "start" )
        echo "Starting all nodes"
        PSSH_PARALLELISM="1"
        cassandra_ssh "sudo service cassandra start && sleep 5"
        ;;

    "stop" )
        echo "Stopping all nodes"
        cassandra_ssh "sudo service cassandra stop"
        ;;

    "status" )
        cassandra_ssh "nodetool status"

        # first print out the AWS status
        # then print out nodetool status output from 1 node
        # might be a good use of cstar
        ;;

    "cstar" )
        echo "cstar (not implemented)"
        # runs command using the cstar library
        ;;

    "down" | "destroy" )
        echo "Crushing dreams, terminating instances."
        docker_c run terraform destroy -var-file=/user/user.tfvars  /tlp/
        ;;

    "terraform" ) # issue raw terraform command
        docker_c run terraform $@
        ;;

    "cassandra-ssh" | "cs" )
        cassandra_ssh $@
#        docker_c run pssh /usr/bin/parallel-ssh $PSSH_COMMON_OPTIONS -h /local/hosts.txt $@
        ;;


    "rebuild" )
        rebuild
        ;;
    "copy-provisioning-scripts" )
        copy_provisioning_scripts
        ;;

    "pssh-shell" | "shell" | "sh" | "bash" )
        docker_c run pssh /bin/bash
        ;;


    "help" | "--help" | "-h" )
        usage
        ;;

    "build-cassandra" | "bc" )
        echo "Using $CASSANDRA_DIR for build directory"

        if [[ $1 == "" ]]; then
            echo "A build name is required."
            exit 1
        fi

        if [[ $2 == "" ]]; then
            echo "A sha1, branch, tag, or directory is required."
            exit 1
        fi

        BUILD_NAME=$1
        export BUILD_NAME

        mkdir -p $TLP_CLUSTER_BUILD_DIR/${BUILD_NAME}/{conf,deb}

        # we should only allow the tag if we're using the tlp-cluster managed cassandra repo
        if [[ -d $2 ]]; then
            echo "Building from a directory $2"

        else
            echo "Attempting to build tag/sha/branch $2"
            message "Switching to tag $2"
            (
                cd $CASSANDRA_DIR
                git fetch origin
                git checkout $2
            )
        fi

        docker_c up build-cassandra
        ;;


    "ls-cassandra" | "lsc" )
        echo "Available builds:"

        for x in $(ls ~/.tlp-cluster/builds)
        do
            echo "$x"
        done
        ;;

    "use-cassandra" | "use" )
        if [[ ! -d provisioning/cassandra ]]; then
            mkdir -p provisioning/cassandra
        fi

        cp -R $TLP_CLUSTER_BUILD_DIR/$1/deb/* provisioning/
        cp -R $TLP_CLUSTER_BUILD_DIR/$1/conf/* provisioning/cassandra/

        echo "Updating cassandra.yaml with seed list"
        SEED_LIST=$(python -c "fp = open('seeds.txt', 'r'); lines = fp.readlines(); tmp = ','.join([x.strip() for x in lines]); print(tmp)")

        CASSANDRA_YAML="provisioning/cassandra/cassandra.yaml"
        CASSANDRA_ENV="provisioning/cassandra/cassandra-env.sh"

        sed -i -e "s/\(.*\)- seeds.*/\1- seeds: \"$SEED_LIST\"/g" $CASSANDRA_YAML
        sed -i -e 's/^endpoint_snitch:.*/endpoint_snitch: Ec2Snitch/' $CASSANDRA_YAML

        # let it violate range movements, this is desired in almost every case
        echo "Disabling consistent range moviement"
        printf '\nJVM_OPTS="$JVM_OPTS -Dcassandra.consistent.rangemovement=false" \n'  >> $CASSANDRA_ENV

        echo "Cassandra deb and config copied to provisioning/.  Config files are located in provisioning/cassandra.  Use tlp-cluster install to push the artifacts to the nodes."
        ;;
    * )
        echo "Unknown command."
        usage
        ;;
esac
